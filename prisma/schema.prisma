generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts    Account[]
  creditCards CreditCard[]
  categories  Category[]
  transactions Transaction[]
  budgets     Budget[]
  goals       Goal[]

  @@map("users")
}

model Account {
  id        String   @id @default(cuid())
  name      String
  type      String
  balance   Float    @default(0)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model CreditCard {
  id        String   @id @default(cuid())
  name      String
  limit     Float
  dueDate   Int
  closeDate Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("credit_cards")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  color       String?
  icon        String?
  isActive    Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("categories")
}

model Transaction {
  id            String    @id @default(cuid())
  description   String
  amount        Float
  type          String
  date          DateTime
  isPaid        Boolean   @default(false)
  userId        String
  accountId     String?
  creditCardId  String?
  categoryId    String
  goalId        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  account    Account?    @relation(fields: [accountId], references: [id], onDelete: SetNull)
  creditCard CreditCard? @relation(fields: [creditCardId], references: [id], onDelete: SetNull)
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  goal       Goal?       @relation(fields: [goalId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model Budget {
  id        String   @id @default(cuid())
  name      String
  amount    Float
  spent     Float    @default(0)
  month     Int
  year      Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
  @@map("budgets")
}

model Goal {
  id          String   @id @default(cuid())
  title       String
  description String?
  targetAmount Float
  currentAmount Float   @default(0)
  targetDate   DateTime
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("goals")
}